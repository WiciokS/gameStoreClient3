
package lt.viko.eif.vskuder.client;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import jakarta.xml.ws.Service;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceException;
import jakarta.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "StorePortService", targetNamespace = "http://spring.io/guides/gs-producing-web-service", wsdlLocation = "http://localhost:8080/ws/store.wsdl")
public class StorePortService
    extends Service
{

    private final static URL STOREPORTSERVICE_WSDL_LOCATION;
    private final static WebServiceException STOREPORTSERVICE_EXCEPTION;
    private final static QName STOREPORTSERVICE_QNAME = new QName("http://spring.io/guides/gs-producing-web-service", "StorePortService");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL("http://localhost:8080/ws/store.wsdl");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        STOREPORTSERVICE_WSDL_LOCATION = url;
        STOREPORTSERVICE_EXCEPTION = e;
    }

    public StorePortService() {
        super(__getWsdlLocation(), STOREPORTSERVICE_QNAME);
    }

    public StorePortService(WebServiceFeature... features) {
        super(__getWsdlLocation(), STOREPORTSERVICE_QNAME, features);
    }

    public StorePortService(URL wsdlLocation) {
        super(wsdlLocation, STOREPORTSERVICE_QNAME);
    }

    public StorePortService(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, STOREPORTSERVICE_QNAME, features);
    }

    public StorePortService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public StorePortService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns StorePort
     */
    @WebEndpoint(name = "StorePortSoap11")
    public StorePort getStorePortSoap11() {
        return super.getPort(new QName("http://spring.io/guides/gs-producing-web-service", "StorePortSoap11"), StorePort.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns StorePort
     */
    @WebEndpoint(name = "StorePortSoap11")
    public StorePort getStorePortSoap11(WebServiceFeature... features) {
        return super.getPort(new QName("http://spring.io/guides/gs-producing-web-service", "StorePortSoap11"), StorePort.class, features);
    }

    private static URL __getWsdlLocation() {
        if (STOREPORTSERVICE_EXCEPTION!= null) {
            throw STOREPORTSERVICE_EXCEPTION;
        }
        return STOREPORTSERVICE_WSDL_LOCATION;
    }

}
